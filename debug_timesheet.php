<?php

require_once __DIR__ . '/vendor/autoload.php';

use Illuminate\Database\Capsule\Manager as DB;
use Carbon\Carbon;

// Load Laravel configuration
$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "🔍 AI TIMESHEET DEBUG TOOL\n";
echo "=========================\n\n";

try {
    // 1. Check if Jonny Duyanon exists
    echo "1. CHECKING EMPLOYEE DATA\n";
    $jonny = DB::table('employees')
        ->where('first_name', 'Jonny')
        ->where('last_name', 'Duyanon')
        ->first();
    
    if (!$jonny) {
        echo "❌ Jonny Duyanon not found in employees table\n";
        exit;
    }
    
    echo "✅ Found Jonny Duyanon:\n";
    echo "   ID: {$jonny->id}\n";
    echo "   Name: {$jonny->first_name} {$jonny->last_name}\n";
    echo "   Department: {$jonny->department}\n\n";
    
    // 2. Check ALL attendance data for Jonny
    echo "2. CHECKING ALL ATTENDANCE DATA FOR JONNY\n";
    $allAttendance = DB::table('attendances')
        ->where('employee_id', $jonny->id)
        ->orderBy('date', 'desc')
        ->get();
    
    echo "   Total attendance records: {$allAttendance->count()}\n";
    
    if ($allAttendance->count() > 0) {
        echo "   Latest 5 records:\n";
        foreach ($allAttendance->take(5) as $att) {
            echo "   - Date: {$att->date}, Clock In: {$att->clock_in_time}, Clock Out: {$att->clock_out_time}, Total: {$att->total_hours}h\n";
        }
    } else {
        echo "   ❌ NO ATTENDANCE RECORDS FOUND!\n";
    }
    echo "\n";
    
    // 3. Check current week calculation
    echo "3. CHECKING CURRENT WEEK CALCULATION\n";
    $currentDate = Carbon::now();
    $weekStart = Carbon::now()->startOfWeek(Carbon::MONDAY);
    $weekEnd = $weekStart->copy()->endOfWeek();
    
    echo "   Current Date: {$currentDate->format('Y-m-d H:i:s')}\n";
    echo "   Week Start (Monday): {$weekStart->format('Y-m-d')}\n";
    echo "   Week End (Sunday): {$weekEnd->format('Y-m-d')}\n\n";
    
    // 4. Check attendance in current week
    echo "4. CHECKING CURRENT WEEK ATTENDANCE\n";
    $currentWeekAttendance = DB::table('attendances')
        ->where('employee_id', $jonny->id)
        ->where('date', '>=', $weekStart->format('Y-m-d'))
        ->where('date', '<=', $weekEnd->format('Y-m-d'))
        ->orderBy('date', 'asc')
        ->get();
    
    echo "   Records in current week: {$currentWeekAttendance->count()}\n";
    if ($currentWeekAttendance->count() > 0) {
        foreach ($currentWeekAttendance as $att) {
            echo "   - {$att->date}: {$att->clock_in_time} to {$att->clock_out_time} ({$att->total_hours}h)\n";
        }
    } else {
        echo "   ❌ NO RECORDS IN CURRENT WEEK!\n";
    }
    echo "\n";
    
    // 5. Test the controller method directly
    echo "5. TESTING CONTROLLER METHOD DIRECTLY\n";
    $controller = new \App\Http\Controllers\TimesheetController();
    
    // Use reflection to access the private generateWeeklySchedule method
    $reflection = new ReflectionClass($controller);
    $method = $reflection->getMethod('generateWeeklySchedule');
    $method->setAccessible(true);
    
    // Get employee model
    $employee = \App\Models\Employee::find($jonny->id);
    
    // Get recent attendance (using same logic as controller)
    $weekStartForAttendance = Carbon::now()->startOfWeek(Carbon::MONDAY);
    $recentAttendance = DB::table('attendances')
        ->where('employee_id', $jonny->id)
        ->where('date', '>=', $weekStartForAttendance->copy()->subWeeks(4)->format('Y-m-d'))
        ->where('date', '<=', $weekStartForAttendance->copy()->addWeeks(1)->format('Y-m-d'))
        ->orderBy('date', 'desc')
        ->get();
    
    echo "   Recent attendance query range:\n";
    echo "   From: {$weekStartForAttendance->copy()->subWeeks(4)->format('Y-m-d')}\n";
    echo "   To: {$weekStartForAttendance->copy()->addWeeks(1)->format('Y-m-d')}\n";
    echo "   Records found: {$recentAttendance->count()}\n\n";
    
    // Call the generateWeeklySchedule method
    $weeklyData = $method->invoke($controller, $employee, $recentAttendance);
    
    echo "6. WEEKLY DATA GENERATED BY CONTROLLER\n";
    foreach ($weeklyData as $day => $data) {
        echo "   {$day}:\n";
        echo "     Date: {$data['date']}\n";
        echo "     Time In: {$data['time_in']}\n";
        echo "     Time Out: {$data['time_out']}\n";
        echo "     Total Hours: {$data['total_hours']}\n";
        echo "     Notes: {$data['notes']}\n";
    }
    echo "\n";
    
    // 6. Create sample data if none exists
    if ($allAttendance->count() === 0) {
        echo "7. CREATING SAMPLE ATTENDANCE DATA\n";
        
        for ($i = 0; $i < 5; $i++) {
            $date = $weekStart->copy()->addDays($i);
            
            // Create realistic attendance record
            $clockIn = $date->copy()->setTime(8 + rand(0, 1), rand(0, 59));
            $clockOut = $clockIn->copy()->addHours(8)->addMinutes(rand(30, 90));
            $breakStart = $clockIn->copy()->addHours(4);
            $breakEnd = $breakStart->copy()->addHour();
            
            $totalMinutes = $clockOut->diffInMinutes($clockIn) - 60;
            $totalHours = round($totalMinutes / 60, 2);
            $overtimeHours = max(0, $totalHours - 8);
            
            $attendanceId = DB::table('attendances')->insertGetId([
                'employee_id' => $jonny->id,
                'date' => $date->format('Y-m-d'),
                'clock_in_time' => $clockIn->format('H:i:s'),
                'clock_out_time' => $clockOut->format('H:i:s'),
                'break_start_time' => $breakStart->format('H:i:s'),
                'break_end_time' => $breakEnd->format('H:i:s'),
                'total_hours' => $totalHours,
                'overtime_hours' => $overtimeHours,
                'status' => 'present',
                'created_at' => now(),
                'updated_at' => now()
            ]);
            
            echo "   ✅ Created attendance for {$date->format('Y-m-d')}: {$clockIn->format('H:i')} - {$clockOut->format('H:i')} ({$totalHours}h)\n";
        }
        
        echo "\n✅ Sample data created! Try generating the AI timesheet again.\n";
    }
    
    echo "\n🎯 DIAGNOSIS COMPLETE!\n";
    echo "If the issue persists, the problem might be in the frontend JavaScript or API routing.\n";

} catch (Exception $e) {
    echo "❌ Error: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}
